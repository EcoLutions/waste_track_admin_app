import { patchState, signalStore, withComputed, withMethods, withState } from '@ngrx/signals';
import { computed, inject } from '@angular/core';
import { Router } from '@angular/router';
import { VehicleService } from '../../../../../entities';
import { VehicleEntity, VehicleTypeEnum } from '../../../../../entities';
import { DistrictContextStore } from '../../../../../shared/stores/district-context.store';

export interface CreateVehicleState {
  // Form data
  formData: {
    licensePlate: string;
    vehicleType: VehicleTypeEnum;
    volumeCapacity: number;
    weightCapacity: number;
    mileage: number;
    assignedDriverId: string;
    lastMaintenanceDate: string;
    nextMaintenanceDate: string;
    isActive: boolean;
  };

  // UI state
  isLoading: boolean;
  error: string | null;
  isSuccess: boolean;
}

const initialState: CreateVehicleState = {
  formData: {
    licensePlate: '',
    vehicleType: VehicleTypeEnum.TRUCK,
    volumeCapacity: 1000,
    weightCapacity: 5000,
    mileage: 0,
    assignedDriverId: '',
    lastMaintenanceDate: '',
    nextMaintenanceDate: '',
    isActive: true
  },
  isLoading: false,
  error: null,
  isSuccess: false
};

export const CreateVehicleStore = signalStore(
  { providedIn: 'root' },

  // State
  withState(initialState),

  // Computed properties
  withComputed((state) => {
    const districtContextStore = inject(DistrictContextStore);

    return {
      isFormValid: computed(() => {
        const form = state.formData();
        return form.licensePlate.trim() !== '' &&
          form.volumeCapacity > 0 &&
          form.weightCapacity > 0 &&
          form.mileage >= 0;
      }),

      // District context
      districtId: computed(() => districtContextStore.districtId()),
      districtName: computed(() => districtContextStore.districtName()),

      vehiclePreview: computed((): Partial<VehicleEntity> => {
        const form = state.formData();
        const districtId = districtContextStore.districtId();

        return {
          id: 'preview',
          licensePlate: form.licensePlate,
          vehicleType: form.vehicleType,
          volumeCapacity: form.volumeCapacity,
          weightCapacity: form.weightCapacity,
          mileage: form.mileage,
          districtId: districtId || '',
          assignedDriverId: form.assignedDriverId || null,
          lastMaintenanceDate: form.lastMaintenanceDate ? new Date(form.lastMaintenanceDate) : null,
          nextMaintenanceDate: form.nextMaintenanceDate ? new Date(form.nextMaintenanceDate) : null,
          isActive: form.isActive
        };
      })
    };
  }),

  // Methods
  withMethods((store) => {
    const vehicleService = inject(VehicleService);
    const router = inject(Router);
    const districtContextStore = inject(DistrictContextStore);

    return {
      // Form actions
      updateFormField<K extends keyof CreateVehicleState['formData']>(
        field: K,
        value: CreateVehicleState['formData'][K]
      ): void {
        patchState(store, (state) => ({
          formData: {
            ...state.formData,
            [field]: value
          }
        }));
      },

      updateFormData(formData: Partial<CreateVehicleState['formData']>): void {
        patchState(store, (state) => ({
          formData: {
            ...state.formData,
            ...formData
          }
        }));
      },

      resetForm(): void {
        patchState(store, {
          formData: initialState.formData,
          error: null,
          isSuccess: false
        });
      },

      // Vehicle creation
      async createVehicle(): Promise<void> {
        if (!store.isFormValid()) {
          patchState(store, {
            error: 'Por favor complete todos los campos requeridos'
          });
          return;
        }

        // Check if district context is available
        const districtId = districtContextStore.districtId();

        if (!districtId) {
          patchState(store, {
            error: 'No se pudo obtener la información del distrito. Por favor recargue la página.'
          });
          return;
        }

        patchState(store, {
          isLoading: true,
          error: null
        });

        try {
          const formData = store.formData();

          // Create vehicle entity from form data
          const vehicleEntity: VehicleEntity = {
            id: '', // Will be generated by backend
            licensePlate: formData.licensePlate,
            vehicleType: formData.vehicleType,
            volumeCapacity: formData.volumeCapacity,
            weightCapacity: formData.weightCapacity,
            mileage: formData.mileage,
            districtId: districtId,
            assignedDriverId: formData.assignedDriverId || null,
            lastMaintenanceDate: formData.lastMaintenanceDate ? new Date(formData.lastMaintenanceDate) : null,
            nextMaintenanceDate: formData.nextMaintenanceDate ? new Date(formData.nextMaintenanceDate) : null,
            isActive: formData.isActive
          };

          vehicleService.create(vehicleEntity).subscribe({
            next: () => {
              patchState(store, {
                isLoading: false,
                isSuccess: true,
                error: null
              });

              // Navigate to fleet management after successful creation
              setTimeout(() => {
                router.navigate(['/fleet']);
              }, 1500);
            },
            error: (error) => {
              patchState(store, {
                isLoading: false,
                error: error.message || 'Error al crear el vehículo',
                isSuccess: false
              });
            }
          });

        } catch (error) {
          patchState(store, {
            isLoading: false,
            error: 'Error inesperado al crear el vehículo',
            isSuccess: false
          });
        }
      },

      // Utility methods
      setError(error: string | null): void {
        patchState(store, { error });
      },

      setLoading(loading: boolean): void {
        patchState(store, { isLoading: loading });
      }
    };
  })
);
